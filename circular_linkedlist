class Node:
    def __init__(self,data):
        self.data = data
        self.ref = None
class circularll:
    def __init__(self):
        self.head=None       
    def print_ll(self) :
        if not self.head :
            print(" linked list is empty!")
            return
        n = self.head
        while True:
               print(n.data, "-->",end="")
               n = n.ref
               if n==self.head:
                   break
               print("(head)")
    def add_begin(self,data):
        new_node=Node(data)
        if self.head is None:
           self.head=new_node
           new_node.ref = self.head
        else:
            new_node.ref= self.head
            n = self.head
            while n.ref != self.head:
                n = n.ref
            n.ref= new_node
            self.head = new_node
    def add_end(self,data):
        new_node=Node(data)
        if self.head is None:
           self.head=new_node
           new_node.ref = self.head
        else:
            n = self.head
            while n.ref != self.head:
                n = n.ref
            n.ref= new_node
            new_node.ref =self.head
cl1 = circularll()
cl1.add_begin(4)
#dl1.add_before(10,4)
cl1.add_end(5)
#dl1.delete_end()
#dl1.print_ll_reverse()
cl1.print_ll()